{0 Architecture}

Here I will present how to describe a symbolic state of a specific architecture in
read-dwarf.

The architectures are listed by the {!Config.Arch.t} enumeration. Not all
architectures in the enumeration have the full support, but an architecture must
be in the enumeration to be supported. Feel free to add others. This
enumeration is used everywhere to refer to various architectures.

{1 Architecture as a Virtual Module}

read-dwarf uses {{:https://dune.readthedocs.io/en/stable/variants.html} Dune's
virtual modules} to parameterise on the architecture, though currently there is
only one supported: [aarch64]. Any executable (including inline test
executables) must therefore be given valid implementation of the virtual
module.

The signature for the architecture is in {!Sig}, the only module in a Dune
library called [sig]; an implementation is in [src/arch/aarch64/sig.ml], as
part of a library called [sig_aarch64]. Because {!Arch} relies on {!Sig}, it
too becomes virtual, and so does every module that uses {!Arch}. See
[src/isla/dune] to see how to integrate this for running inline tests,
otherwise simply add [sig_aarch64] (or any other implementation module) to the
[libraries] Dune stanza when defining an executable (see [src/bin/dune] and
[src/tests/dune] for examples).

{1 Architectural features}

A lot of architecture specific things, like the function call ABI, the physical
memory size and some other things are in the {!Arch} module.  However some
things are not. For example the list of registers and their SMT types
({!Ast.ty}) are managed by the {!State.Reg} module. This is because the
register list is not statically hard-coded. It is deduced at run-time from
isla, which means that we do not need to maintain a list of system register
anywhere. Obviously the {!Arch} module need to know about some register to
manage the ABI, so those registers will be introduced by {!Arch}, but all the
other register are only introduced if an instruction touching them is used.
This means that if a system register is never used, it's exactly the same as if
doesn't exist for read-dwarf.

{1 Representation of the architectural state}

Full architectural state are represented by value of type {!State.t}, those
value are symbolic and actually represent set of concrete state. This is
explained in {!State} it self.

All state are derived from other state using {!State.copy}, apart from the first
one which should be {!Run.Init.state}. When calling that function, Isla will be
called on a dummy instruction to get the isla initialization sequence. Currently
the {!Run.Init} module just considers the Isla start state as the initial
state. To get the initial state at function entry, only must get the ABI of the
function (of type {!Arch.func_abi}) and then call {!Arch.func_abi.init}
